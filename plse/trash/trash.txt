// int getRowOnFixedRate (int c, int limit)
// {
//     int mx = -inf, x = 0;
//     for (int i = 1; i <= limit; i++){
//         int r = temp2[i];
//         if (swappable[r][c]==0 && clms[r][0] > 1)
//         {
//             int v = latinSquare[r][c];
//             if (frequency[c][v] > mx)
//                 mx = frequency[c][v], x = 0, temp[x++] = r;
//             else if (frequency[c][v] == mx)
//                 temp[x++] = r;
//         }
//     }
//     if(x==0)return -1;
//     return temp[myRand(x) - 1];
// }















// void generateGrid (int n){

//     for(int i=1; i<=n; i++){
        
//         int r = cntFix[i].second;

//         //clm iter & init
//         for(int j=0; j<n; j++)temp[j] = n*n;
//         for(int j=1; j<=n; j++)
//             if(swappable[r][j])temp[ latinSquare[r][j] - 1 ] = 0;

//         //acctual 2nd loop
//         for(int j=1; j<=nonFixedClmsForRow[r][0]; j++){

//             int c = nonFixedClmsForRow[r][j];
//             //row iter
//             for(int k=1; k<=n; k++)
//                 if(swappable[k][c])temp[ latinSquare[k][c] - 1 ] -= 2;
//                 else if(latinSquare[k][c])temp[ latinSquare[k][c] - 1 ] -= 1;

//             int x = myRand(temp, n);
//             if(temp[x-1]==0){
//                 cerr << "errrrrrrrrrrrrrrrrrrrrrrrrooooooorr" << endl;
//                 exit(0);
//             }
//             temp[x-1] = 0;
//             latinSquare[r][c] = x;

//             for(int k=1; k<=n; k++)
//                 if(swappable[k][c])temp[ latinSquare[k][c] - 1 ] += 2;
//                 else if(latinSquare[k][c])temp[ latinSquare[k][c] - 1 ] += 1;
//         }
//     }
    
// }


// void generateGrid (int n){

//     set <int> s;
//     set <int> :: iterator it;

//     for(int i=1; i<=n; i++){

//         memset(temp, 0, sizeof temp);
//         s.clear();
        
//         //column
//         for(int j=1; j<=n; j++)if(swappable[i][j])temp[latinSquare[i][j]] = 1;
//         //value
//        // for(int j=1; j<=n; j++)if(temp[i]==0)s.insert(j);

//         for(int j=1; j<=n; j++)if(!swappable[i][j]){
//             int x = myRand(s.size());
//             it = s.begin();
//             advance(it, x-1);
//             x = *it;
//             s.erase(it);
//             temp[x] = 1;
//             latinSquare[i][j] = x;
//         }
//     }
// }


bool isLatinSquare (int n){
    set <int> r, c;
    for(int i=1; i<=n; i++){
        for(int j=1; j<=n; j++){
	    if(latinSquare[i][j]<1 || latinSquare[i][j]>n){
                cout << "disaster" << endl;
                return false;
            }
            c.insert(latinSquare[j][i]);
            r.insert(latinSquare[i][j]);
            if(swappable[i][j]>0 && swappable[i][j]!=latinSquare[i][j]){
                cout << "fixed cell has changed" << endl;
                return false;
            }
        }
        if(r.size()!=n || c.size()!=n){
	return false;
}
        r.clear(), c.clear();
    }
    return true;
}


void printSquare(int n){
    for(int i=1; i<=n; i++){
        for(int j=1; j<=n; j++){
            printf("%d  ", latinSquare[i][j]);
        }
        puts("");
    }
}



